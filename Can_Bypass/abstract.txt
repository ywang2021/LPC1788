/***********************************************************************
* $Id$		abstract.txt		2011-06-02		
* @file		CAN\Can_Bypass\abstract.txt 
* @brief	Description of the CAN test bypass mode example.
* @version	1.0
* @date		02. June. 2011
* @author	NXP MCU SW Application Team
* 
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/ 
  
@Example description:
	Purpose:
		This example describes how to test CAN operation by using bypass mode
	Process:
		Using 2 CAN peripheral CAN1 and CAN2 in same eval board to test CAN operation.
		This example just supports extended ID format.
		Both CAN1 and CAN2 are set baudrate at 125KHz.
		
		In bypass mode, AFULT will be disable, all messages could be received.
		One transmit message is initialized with ID = 0x00001234 and data = 0x00.
		CAN1 will send this message to CAN2
		
		Whenever CAN2 receive message, CAN interrupt service routine "CAN_IRQHandler"will be 
		invoked to receive message, print message's data into serial display via UART0 port, 
		increase message's ID and data for next transmittion by CAN1.
		This process is a endless loop.
		
		Open serial display to observe CAN transfer processing. 

@Directory contents:
	\Keil:	includes RVMDK (Keil)project and configuration files 
	\EWARM: includes EWARM (IAR) project and configuration files
	
	Can_Bypass: main program
	
@How to run:
	Hardware configuration:		
		This example was tested on:			
			LPC1788 OEM board rev A connects with OEM Base Board rev A
				+ Connect: TP6 - P0.4-RD2 (J5.16)
				+ Connect: TP8 - P0.5-TD2 (J5.15)
				+ JP14: 1-3: ON
						2-4: ON
			(Choose correct working board by setting "_CURR_USING_BRD" marco in .\BoardSupport\bsp.h file)

			
		Serial display configuration: (e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- UART0: USB serial port
					+ All jumpers: Default
				- UART1: 
					+ P0.15 (@ J5.19) - JP12.2
					+ P0.16 (@ J3.24) - JP13.2
				- UART2:
					+ JP6: 	1-2: OFF
							3-4: OFF
							5-6: ON
					+ JP12: 1-2
					+ JP13: 1-2
					+ Other jumpers: Default
				- UART3:
					+ P0.2 (@J5.13) - JP12.2
					+ P0.3 (@J5.14) - JP13.2
				- UART4:
					+ P0.22 (@J3.25) - JP12.2
					+ P2.9  (@J3.15) - JP13.2
	    	2. LPC1788 IAR Start Kit Rev.B
				- UART0: 
					All jumpers: optional
			Note: Pls sure that "USED_UART_DEBUG_PORT" macro in debug_frmwrk.h is set correctly
	
	Running mode:
		This example can run on RAM/ROM mode.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
			to be connected:
			1. LPC1788 OEM Board rev A and OEM Base Board rev A
				- JP20: 1-2: ON
						3-4: ON
			(Using UART0 on USB serial port
			Sure that you choose correct COM port number - Pls reference at:
			"Device Manager" -> "Ports(COM & LPT)" -> "USB Serial Port (COMx)")
		    
		    2. LPC1788 IAR Start Kit Rev.B
				- RST_E: ON
				- ISP_E: ON
	
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on ROM mode)
		- Step 3: Connect UART on this board to COM port on your computer
		- Step 4: Configure hardware and serial display as above instruction 
		- Step 5: Run example:
			- Press "1" to initialize message 
			- Press "2" to start CAN operation
